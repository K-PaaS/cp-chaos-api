spring:
  application:
    name: cp-chaos-api
  freemarker:
    template-loader-path: classpath:/templates/
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  cloud:
    vault:
      scheme: http
      uri: ${VAULT_URL}
      authentication: APPROLE
      kv:
        enabled: true
        backend: secret
      app-role:
        role-id: ${VAULT_ROLE_ID}
        secret-id: ${VAULT_SECRET_ID}
        role: ${VAULT_ROLE_NAME}
        app-role-path: approle
      config:
        lifecycle:
          enabled: true
          min-renewal: 10s
          expiry-threshold: 1m

server:
  port: ${PORT:8092}
  auth:
    valid: N

cpChaos:
  authorization:
    id: admin
    password: cpchaos!123
  api:
    access: "/apis"
    list:
      podFaults:
        podKill:
          list: "/apis/chaos-mesh.org/v1alpha1/namespaces/{namespace}/podchaos"
          get: "/apis/chaos-mesh.org/v1alpha1/namespaces/{namespace}/podchaos/{name}"
          create: "/apis/chaos-mesh.org/v1alpha1/namespaces/{namespace}/podchaos"
          delete: "/apis/chaos-mesh.org/v1alpha1/namespaces/{namespace}/podchaos/{name}"
      networkFaults:
        delay:
          list: "/apis/chaos-mesh.org/v1alpha1/namespaces/{namespace}/networkchaos"
          get: "/apis/chaos-mesh.org/v1alpha1/namespaces/{namespace}/networkchaos/{name}"
          create: "/apis/chaos-mesh.org/v1alpha1/namespaces/{namespace}/networkchaos"
          delete: "/apis/chaos-mesh.org/v1alpha1/namespaces/{namespace}/networkchaos/{name}"
      stressScenarios:
        list: "/apis/chaos-mesh.org/v1alpha1/namespaces/{namespace}/stresschaos"
        get: "/apis/chaos-mesh.org/v1alpha1/namespaces/{namespace}/stresschaos/{name}"
        create: "/apis/chaos-mesh.org/v1alpha1/namespaces/{namespace}/stresschaos/{name}"
        delete: "/apis/chaos-mesh.org/v1alpha1/namespaces/{namespace}/stresschaos"
      dashboard:
        url: ${CHAOS_DASHBOARD_API_URI}
        experiment:
            list: "/api/experiments"
            get: "/api/experiments/{uid}"
        event: "/api/events"

cpApi:
  url: ${CP_PORTAL_API_URI}

jwt:
  secret: dfa4ad2646d6b4864f2dfa5428249d4eb54dc29bf3f29658fd4676d25706f83c9fc4ef626fa60d2c589a79ebec448ba4d591e2fcb04926fab783fcae50e97c06
  expirationDateInMs: 10800000
  refreshExpirationDateInMs: 10800000

vault:
  path:
    base: "secret/"
    super-admin-token: "secret/cluster/{clusterId}"
    user-token: "secret/user/{userAuthId}/{clusterId}/{namespace}"
    provider-credential: "secret/{iaas}/{id}"
    cluster-token: "secret/cluster/{id}"
    ssh-key: "secret/ssh-key/{id}"

aspect:
  enabled: false # for checking Elapsed time

cpAnnotations:
  configuration: kubectl.kubernetes.io/, kubernetes.io/, k8s.io/
  last-applied: last-applied

cpNamespace:
  defaultNamespace: cp-portal-temp-namespace
  exceptNamespace: ${cpNamespace.defaultNamespace}, all
  clusterAdminNamespace: kube-system

cpResource:
  clusterResource: Namespace, PersistentVolume, StorageClass, Role, ResourceQuota, LimitRange, ConfigMap

cpMaster:
  name:
  api:
    access: "/api"
    list:
      roleBindings:
        create: "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings"
        delete: "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"
